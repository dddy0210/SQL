HAVING / WHERE 차이

-WHERE : 테이블에서 데이터를 조회한 후 조건을 적용
-HAIVING:그룹별로 조회를 한 다음 조건을 적용 

DCL(Data Controll Language)
-GRANT : 권한 부여
-REVOKE : 권한 강탈

데이터베이스에 들어있는 모든 유저를 검색하는 방법
SELECT USERNAME FROM DBA_USERS;

권한주는법 
GRANT 권한 TO 유저 

테이블스페이스
테이블 만들고, 데이터를 저장하는 물리적 공간

CREATE TABLESPACE 테이블스페이스명 DATAFILE '경로와이름' SIZE 크기 AUTOEXTEND ON NEXT 크기;

권한 뺏기
REVOKE 권한 FROM 사용자

INDEX
테이블내의 데이터를 빠르게 조회할수 있도록 하는 데이터 구조
->규모가 크고, 수정이 빈번하게 일어나지 않는 테이블에 적합하다 

서브쿼리
SQL문 안에 SQL이 있는것
WHERE,HAVING -> 특정값처럼 사용됨
FROM -> 테이블처럼 사용됨 

CONCATENATION(연결) : ||->연결기호 
println("안녕"+"하세요")

AS(ALIAS)
별칭(컬럼의 길이나 식이 너무 길다면 대신 사용할 수잇다. )
-AS뒤에 별칭 작성하기
-컬럼명 뒤에 작성하기 
-FROM절에 테이블명 뒤에 한칸 띄우고 작성 

별칭의 특징
-테이블에 별칭을 줘서 컬럼을 단순,명확히 할 수 있다.
-현재의 SELECT문에서만 유효하다.
-테이블 별칭은 30자 까지 가능하나 짧을 수록 좋다 
-테이블 별칭에는 의미가 있어야 한다.
-FROM절에는 테이블 별칭 설정시 해당 테이블 별칭은 SELECT문장에서 테이블 이름 대신 사용한다. 

JOIN
-데이터베이스에서 '두개 이상의 테이블'을 연결하여 '하나의 결과 테이블'로 만드는것을 의미한다
-이를 통해 데이터를 효율적으로 검색하고 처리하는데 도움을 준다.
-JOIN을 사용하는 이유는 데이터베이스에서 테이블을 분리하여 '데이터의 중복을 최소화'하고 
'데이터의 일관성'을 유지하기 위함이다.
-여러가지 JOIN방식이 있으며 JOIN방식에 따라 결과가 달라진다. 

JOIN
1.Inner Join
-각 테이블에서 조인 조건에 일치되는 데이터만 가져온다
-A와 B테이블의 공통된 부분을 의미한다.
-보통 교집합이라 부름 

select * from 테이블A (INNER 생략가능) JOIN 테이블B ON 조건식 

PK와 FK로 연결되어 있는 테이블끼리 JOIN한다 

SELF INNER JOIN 
-하나의 테이블에서 다른 컬럼을 참조하기 위해서 사용하는 '자기 자신과의 조인'방법 
-이를 통해 데이터베이스에서 한테이블 내의 값을 다른 값과 연결할 수 있다. 

CROSS INNER JOIN
-두개 이상의 테이블에서 '모든 가능한 조합'을 만들어 결과를 반환하는 방법
-이를 통해 두개 이상의 테이블을 조합하여 새로운 테이블을 생성할 수 잇다.
-CROSS JOIN은 일반적으로 테이블간의 관계가 없을 때 사용한다.
-각 행의 모든 가능한 조합을 만들기 때문에 결과가 매우 큰 테이블이 될 수 있으므로 사용에 주의가 필요 

OUTER JOIN
-두 테이블에서 '공통된 값을 가지지 않는 행들'도 반환

LEFT OUTER JOIN
'왼쪽 테이블의 모든행'과 '공통된값'을 가지고 있는 행들을 반환한다. 
-만약 오른쪽 테이블에서 공통된 값을 가지고 있는 행이 없다면 NULL값을 반환 

SELECT*FROM 테이블A LEFT OUTER JOIN 테이블B
ON 테이블A.컬럼=테이블B.컬럼 

RIGHT OUTER JOIN - LEFT OUTER JOIN의 반대 

상황에 따라 어떤걸 사용해야 하는지 다르지만 대부분의 경우 왼쪽 테이블의 데이터를 기준으로 분석
할때가 많기 때문에 LEFT OUTER JOIN을 더 많이 사용 

FULL OUTER JOIN
두 테이블에서 '모든값'을 반환한다.
-만약 공통된 값을 가지고 있지 않는 행이 있다면 NULL값이 반환한다.
-합집합의 연산 결과와 같다
-양쪽 테이블 데이터 집합에서 공통적으로 존재하는 데이터,한쪽에만 존재하는 데이터 모두 추출

VIEW
-하나 이상의 테이블이나 다른 뷰의 데이터를 볼수 잇게 하는 데이터베이스 객체
-실제 데이터는 뷰를 구성하는 테이블의 담겨있지만 마치 테이블 처럼 사용할 수있다. 
-테이블뿐만 아니라 다른 뷰를 참조해 새로운 뷰를 만들어 사용할 수있다. 

VIEW의 사용목적
-여러개의 테이블에서 필요한 정보를 가져다 사용할 떄가 많다
-VIEW를 사용하면 복잡한 쿼리문을 간단하게 만들어준다.
-여러 테이블이 JOIN과 GROUP BY같은 복잡한 쿼리를 VIEW로 저장시켜 놓으면 다음부터는 저장한
VIEW만 호출하면된다. 

VIEW의 특징
-독립성 : 원본테이블 구조가 변경되어도 뷰를 사용하는 응용프로그램은 변경하지 않아도 된다 
-편리성 : 복잡한 쿼리문을 뷰로 생성함으로써 관련 쿼리를 단순하게 작성할 수 있다.
-보안성 : 숨기고 싶은 정보가 존재한다면 뷰를 생성할 때 해당컬럼을 빼고 생성함으로써 정보를 
감출수있다. 

뷰의 생성
CREATE VIEW뷰이름 AS(
         쿼리문 
)

뷰의 수정
OR REPLACE:기존의 정의를 변경하는데 사용할 수잇다. 
CREATE OR REPLACE VIEW AS(
    쿼리문
)

DROP VIEW 뷰이름 RESTRICT OR CASCADE
RESTRICT: 뷰를 다른곳에서 참조하고 있다면 삭제가 취소됨
CASCADE: 뷰를 참조하는 다른 뷰나 제약조건까지 모두 삭제 

TCL(Transaction Control Language): (DML을 위한 명령어) 트랜젝션 제어 언어

트랜잭션 : 데이터베이스의 작업을 처리하는 논리적 연산 단위
-쿼리문 하나가 트랜잭션임 

트랜잭션의 특성
원자성(Atomicity) : 원자와 같이 데이터베이스 연산들이 나눌수도 줄일수도 없는 하나의 유닛으로 취급
트랜잭션에 정의된 연산들은 모두 실행되던지, 실행되지 않던지 해야함

일관성(Consistency) : 데이터베이스의 트랜잭션이 제약조건, cascades를 포함한
정의된 모든 조건에 맞게 데이터 값이 변경됨

고립성(Isolation) : 특정 DBMS에서 다수의 유저들이 같은 시간에 같은 데이터에 접근하였을 때 
수행중인 트랜잭션이 완료될 때 까지
다른 트랜잭션의 요청을 막음으로서 데이터가 꼬이는걸 방지한다.

영속성,지속성(Durability) :트랜잭션 실행이 성공적일때, 그 트랜잭션이 갱신한 데이터베이스 내용은
영구적으로 저장됨 

TCL의 종류
COMMIT : DML로 변경된 데이터를 데이터베이스에 적용할 때 사용
-COMMIT문 사용시 이전 데이터는 영원히 지워짐
-COMMIT문 사용시 모든 사용자가 변경된 데이터 확인 가능

사용법 COMMIT;

ROLLBACK : DML로 변경된 데이터를 변경 이전 상태로 되돌릴 때 사용
-데이터에 대한 변경사항 취소 

사용법 : ROLLBACK;

SAVEPOINT
전체 트랜잭션을 ROLLBACK하지 않고 현시점에서 SAVEPOINT까지 일부 트랜잭션만 오류 복귀 가능
-복잡한 대규모 트랜잭션에서 에러가 발생했을 때 주로 사용 
-복수의 저장점 정의 가능

SAVEPOINT 저장점명;

ROLLBACK TO 저장점명;


































