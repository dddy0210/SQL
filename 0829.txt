DML- 데이터 조작어 
SELECT,INSERT,DELETE,UPDATE
** SELECT
테이블에서 원하는 데이터를 조회할 때 사용하는 키워드
SELECT 컬럼명1,컬럼명2... FROM 테이블명
   WHERE 조건식;

**INSERT:추가
테이블에 데이터를 추가할 때 사용하는 키워드
INSERT INTO 테이블명 VALUES(값1,값2,....)

**UPDATE
테이블의 내용을 수정할 때 사용하는 키워드
UPDATE 테이블명
   SET 기존컬럼명 = 새로운 값
   WHERE 조건식 조건을 달지 않으면 테이블 전체가 바뀌어 버린다.

**DELETE
삭제 ※TRUNCATE는 다 날려버리는건데 DELETE는 1개씩 지운다.
행 1개가 통째로 날아간다.
 DELETE FROM 테이블명
   WHERE 조건식

DDL(Data Definition Language) : 데이터 정의어
-데이터베이스 객체를 생성, 삭제, 변경하는 언어이다. 
1.CREATE : 테이블이나 인덱스, 뷰 등 데이터베이스 객체를 생성한다.
2.DROP : 생성된 데이터베이스 객체를 영구히 삭제
3.ALTER : 이미 생성된 데이터 베이스 객체를 수정
4.TRUNCATE : 테이블의 데이터를 통째로 삭제

DCL(Data Controll Language)
데이터 제어어
데이터베이스에 접근하고 객체들을 사용하도록 권한을 주고 회수하는 명령어
GRANT : 권한 부여
REVOKE : 권한 강탈

1. 하나의 릴레이션에서 튜플의 전체 개수를 릴레이션의 ( ) 이라고 한다. ( ) 의 올바른 것은?
카디널리티(Cardinality)
--------------------------------------------------------------------------------------------------------
CASE문
-어떠한 조건에 맞춰 값을 출력하는 문법
-CASE WHEN 조건식 THEN '참값' ELSE '거짓값' END 

PL/SQL
-프로그래밍 언어의 특성을 수용하여 SQL에서 사용할 수 없는 절차적 프로그래밍 기능을 
가지고 있는 SQL의 단점을 보완할 수있는 프로그래밍 언어

PL/SQL문을 사용하는 이유
-대용량 데이터를 연산해야 할 때 서버로 전송해서 처리하려면 네트워크에 부하가 많이 걸림
-이때 프로시저나 함수를 사용하여 데이터를 연산하고 가공한 후에 , 최종결과만 서버에 전송하면
부담을 줄일 수 있다. 
-로직을 수정하기 위해 서버를 껏다 켜지 않아도 된다. 
-쿼리문을 직접 노출하지 않는 만큼, SQL injection의 위험성이 줄어든다. 

PL/SQL의 기본구조

DECLARE(선언부) PL/SQL문에서 사용하는 모든 변수나 상수를 선언하는 부분

IS 

BEGIN(실행부) 절차적으로 SQL문을 실행할 수 있도록 절차적인 언어의 요소인 제어문, 반복문 함수의 정의 등 
로직을 기술할 수 있는 부분 쿼리문을 작성할 수 있다.

END;(실행문종료)

PL/SQL문의 종류
프로시저 : 리턴 값을 하나 이상 가질 수 있는 프로그램
함수 : 리턴 값을 반드시 반환해야 하는 프로그램
패키지 : 하나 이상의 프로시저, 함수, 변수 등의 묶음
트리거 : 지정된 이벤트가 발생하면 자동으로 실행되는 PL/SQL블록

IF문
1.IF 조건 THEN 실행문;
  END IF;

2.IF 조건 THEN 실행문;
  END IF;

3.IF 조건 THEN 실행문;
  ELSLF 조건문 THEN 실행문;
  ELSE 실행문;
  END IF;

반복문

1.FOR LOOP문

FOR index in 시작값 .. END값 LOOP
                반복하고자 하는 명령
       
END LOOP;

BEGIN 
   FOR i IN 1

2.WHILE문

WHILE 조건
LOOP
명령;
END LOOP;

프로시저(PROCEDURE)
-데이터베이스에 대한 일련의 작업을 처리한 절차를 데이터베이스에 영구저장하고
사용하는 모듈
-쿼리를 함수처럼 사용하기 위한 쿼리의 집합

장점
하나의 요청으로 여러 SQL문을 실행할 수있다.
네트워크 소요시간을 줄여 성능을 개선할 수 있다.
기능 변경이 편리하다
서버에서 실행되기 때문에 속도가 빠르다
리턴값이 있을 수도 있고 없을 수도 있다
여러개의 리턴값으 보낼 수도 있다. 

단점
재사용성이 좋지 않다

함수
하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 코드의 집합
-반환값이 무조건 있어야 한다. 
-쿼리문 내에서 사용하는것이 가능하다 
-클라이언트(화면)에서 값을 건네받고 서버에서 필요한것을 가져와서 클라이언트에서 작업을 하고 반환 
-프로시저보다는 속도가 느리다

CREATE OR REPLACE PROCEDURE 프로시저명(
    매개변수 IN 데이터타입 := 값;
    매개변수 IN 데이터타입 := % TYPE 
);
IS 
   함수내에서 사용할 지역변수의 선언
BEGIN 
   실행할 문장
END;

프로시저의 사용
CALL 프로시저명(값,값2)

프로시저와 SQL
프로시저와 DML 접목하기

스키마의 종류 :개념스키마 내부스키마 외부스키마 

행(row)
-테이블을 구성하는 데이터들 중 가로로 묶은 데이터셋을 의미한다. 일반적으로 한 명에 대한 
정보를 가지고 있다.
-관계형 데이터베이스에서는 튜플(tuple), 또는 레코드(record)라고 부른다. 
-행의 개수를 카디널리티(Cardinality)라고 한다 

열(column)
-테이블을 구성하는 데이터들 중 세로로 묶은 데이터 셋을 의미한다
-일반적으로 그 테이블의 속성을 의미한다
-열을 구성하는 값들은 도메인(domain)으로 되어 있다.
-관계형 데이터베이스에서는 속성(attribute)라고 부른다. 
-열의 수를 차수(Degree)라고 한다.























